import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet"
import { formartBrl, productsAtom } from "@/pages"
import { SignInButton, SignedIn, SignedOut, UserButton } from "@clerk/nextjs"
import { useAtom } from "jotai"
import { Minus, Plus, ShoppingCart } from "lucide-react"
import { useTheme } from "next-themes"
import Head from "next/head"
import Link from "next/link"
import React, { useEffect, useState } from "react"
import { Button } from "../button"
export default function DefaultLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <>
      <Head>
        <title>E-commerce</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="flex min-h-full flex-col items-center gap-8  bg-background pt-28  text-foreground">
        {children}
      </main>
    </>
  )
}

const Header = () => {
  const [products, setProducts] = useAtom(productsAtom)
  const [open, setOpen] = useState(false)
  const handleAdd = (product: {
    name: string
    price: number
    description: string
  }) => {
    setProducts((prev) => {
      const productExists = prev.find((p) => p.name === product.name)
      if (productExists) {
        localStorage.setItem(
          "products",
          JSON.stringify(
            prev.map((p) => {
              if (p.name === product.name) {
                return {
                  ...p,
                  quantity: p.quantity + 1,
                }
              }
              return p
            })
          )
        )
        return prev.map((p) => {
          if (p.name === product.name) {
            return {
              ...p,
              quantity: p.quantity + 1,
            }
          }
          return p
        })
      }
      localStorage.setItem(
        "products",
        JSON.stringify([
          ...prev,
          {
            ...product,
            quantity: 1,
          },
        ])
      )
      return [
        ...prev,
        {
          ...product,
          quantity: 1,
        },
      ]
    })
  }

  const handleRemove = (product: {
    name: string
    price: number
    description: string
  }) => {
    setProducts((prev) => {
      const productExists = prev.find((p) => p.name === product.name)

      if (productExists) {
        if (productExists.quantity === 1) {
          localStorage.setItem(
            "products",
            JSON.stringify(
              prev.filter((p) => {
                return p.name !== product.name
              })
            )
          )

          return prev.filter((p) => p.name !== product.name)
        }
        localStorage.setItem(
          "products",
          JSON.stringify(
            prev.map((p) => {
              if (p.name === product.name) {
                return {
                  ...p,
                  quantity: p.quantity - 1,
                }
              }
              return p
            })
          )
        )
        return prev.map((p) => {
          if (p.name === product.name) {
            return {
              ...p,
              quantity: p.quantity - 1,
            }
          }
          return p
        })
      }

      return [
        ...prev,
        {
          ...product,
          quantity: 1,
        },
      ]
    })
  }
  useEffect(() => {
    const localProducts = localStorage.getItem("products")

    if (localProducts) {
      setProducts(JSON.parse(localProducts) as typeof products)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  return (
    <header className="fixed flex h-16 w-full items-center justify-between border-b border-border bg-background px-4 backdrop-blur-sm">
      <div className="flex items-center gap-6">
        <Link href="/" className="text-3xl font-bold text-purple-800">
          E-commerce
        </Link>
        <Link href="/orders" className="text-xl font-bold text-purple-600">
          Pedidos
        </Link>
        <Link href="/apis" className="text-xl font-bold text-purple-600">
          Apis
        </Link>
      </div>
      <div className="flex items-center gap-4">
        <SignedIn>
          {/* Mount the UserButton component */}
          <UserButton afterSignOutUrl="/" appearance={{}} />
        </SignedIn>
        <SignedOut>
          {/* Signed out users get sign in button */}
          <SignInButton afterSignInUrl="/" />
        </SignedOut>
        <Sheet open={open} onOpenChange={setOpen}>
          <SheetTrigger asChild>
            <Button variant="ghost" className="relative">
              <ShoppingCart />
              <div className="absolute right-0 top-0 flex h-4 w-4 items-center justify-center rounded-full bg-red-600 text-xs text-white">
                {products.reduce((acc, curr) => acc + curr.quantity, 0)}
              </div>
            </Button>
          </SheetTrigger>
          <SheetContent>
            <SheetHeader>
              <SheetTitle>Seu carrinho</SheetTitle>
            </SheetHeader>
            <div className="my-6 flex h-full max-h-[80vh] flex-col gap-4 overflow-y-auto">
              {products.map((product) => (
                <div
                  className="flex items-center justify-between gap-2"
                  key={product.name}
                >
                  <div className="flex flex-col gap-2">
                    <p className="text-xl">{product.name}</p>
                    <p className="text-sm">{product.description}</p>
                  </div>
                  <div className="flex flex-col justify-between gap-2">
                    <p className="text-right">{formartBrl(product.price)}</p>
                    <div className="flex items-center gap-2 ">
                      <Button
                        variant="destructive"
                        onClick={() => handleRemove(product)}
                        size="sm"
                      >
                        <Minus size={20} />
                      </Button>
                      <p>{product.quantity}</p>

                      <Button
                        variant="secondary"
                        onClick={() => handleAdd(product)}
                        size="sm"
                      >
                        <Plus size={20} />
                      </Button>
                    </div>
                  </div>
                </div>
              ))}

              {products.length === 0 ? (
                <p className="text-center">Seu carrinho est√° vazio</p>
              ) : (
                <div className="mt-12 flex w-full flex-col gap-4">
                  <div className="flex justify-between">
                    <p>Total</p>
                    <p>
                      {formartBrl(
                        products.reduce(
                          (acc, curr) => acc + curr.quantity * curr.price,
                          0
                        )
                      )}
                    </p>
                  </div>
                  <Link
                    href="/checkout"
                    className="w-full rounded bg-primary px-4 py-3 text-center font-semibold text-primary-foreground"
                    onClick={() => setOpen(false)}
                  >
                    Finalizar compra
                  </Link>
                </div>
              )}
            </div>
          </SheetContent>
        </Sheet>

        <ThemeSwitch />
      </div>
    </header>
  )
}

const ThemeSwitch = () => {
  const [mounted, setMounted] = useState(false)
  const { theme, setTheme } = useTheme()

  // useEffect only runs on the client, so now we can safely show the UI
  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null
  }

  return (
    <select value={theme} onChange={(e) => setTheme(e.target.value)}>
      <option value="system">System</option>
      <option value="dark">Dark</option>
      <option value="light">Light</option>
    </select>
  )
}
